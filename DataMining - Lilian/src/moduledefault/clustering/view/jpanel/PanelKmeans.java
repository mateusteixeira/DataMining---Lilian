/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package moduledefault.clustering.view.jpanel;

import java.awt.Frame;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import moduledefault.clustering.kmeans.KMeansPrincipal;
import moduledefault.clustering.uteis.AvaliacaoAgrupamento;
import moduledefault.clustering.uteis.Padrao;
import moduledefault.clustering.uteis.Cluster;
import moduledefault.clustering.uteis.Operações_Mat;
import moduledefault.clustering.view.frames.JFrameHistoricoKmeans;
import moduledefault.clustering.view.frames.JFrameKmeans;
import moduledefault.clustering.visualization.panels.KmeansSimulacao;
import moduledefault.elicitedbases.arff.view.JDialogData;


public class PanelKmeans extends javax.swing.JPanel {


    int numK;
    JFrameKmeans frameKmeans;
    public static String[] nomeAtributos;
    StringBuffer buffer;
    int teste_distancia = 0;
    KMeansPrincipal k;
    Collection realClasses;
    ArrayList<KMeansPrincipal> listaObjetos;
    ArrayList<StringBuffer> listaBuffer;
    interfaces.Base base;
    static moduledefault.clustering.uteis.Base dados;
    static moduledefault.clustering.uteis.Base dadosOriginal;
    ArrayList<Cluster> clusters;
    AvaliacaoAgrupamento avaliacao;
    boolean block;

    public PanelKmeans(interfaces.Base b, JFrameKmeans k) throws IOException {
        initComponents();
        base = b;
        startMatrizDados();
        frameKmeans = k;
        listaObjetos = new ArrayList<>();
        listaBuffer = new ArrayList<>();
        bHistorico.setEnabled(false);
        bTabela.setEnabled(false);
    }

    public void setNomeClasses(String[] a) {
        PanelKmeans.nomeAtributos = a;
    }

    public JFrameKmeans getFrameKmeans() {
        return frameKmeans;
    }

    public void setFrameKmeans(JFrameKmeans frameKmeans) {
        this.frameKmeans = frameKmeans;
    }

    public Collection getRealClasses() {
        return realClasses;
    }

    public void setRealClasses(Collection realClasses) {
        this.realClasses = realClasses;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonExecuta = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBoxDistancias = new javax.swing.JComboBox();
        bHistorico = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        listResultados = new java.awt.List();
        bTabela = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        panelSimulacao = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jSlider1 = new javax.swing.JSlider();

        setPreferredSize(new java.awt.Dimension(718, 458));

        jButtonExecuta.setText("Executar");
        jButtonExecuta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExecutaActionPerformed(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Distância"));

        jLabel1.setText("Função de Distância:");

        jComboBoxDistancias.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "","Euclidiana"}));
        jComboBoxDistancias.setToolTipText("");
        jComboBoxDistancias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDistanciasActionPerformed(evt);
            }
        });
        jComboBoxDistancias.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jComboBoxDistanciasPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 59, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jComboBoxDistancias, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxDistancias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        bHistorico.setText("Imprimir Histórico");
        bHistorico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bHistoricoActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("Lista de Resultados")));

        listResultados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listResultadosMouseClicked(evt);
            }
        });
        listResultados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listResultadosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(listResultados, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(listResultados, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        bTabela.setText("Visualizar Dados");
        bTabela.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bTabelaActionPerformed(evt);
            }
        });

        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jScrollPane3.setViewportView(jTextArea3);

        jTabbedPane1.addTab("Resultados", jScrollPane3);

        panelSimulacao.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                panelSimulacaoComponentResized(evt);
            }
        });

        javax.swing.GroupLayout panelSimulacaoLayout = new javax.swing.GroupLayout(panelSimulacao);
        panelSimulacao.setLayout(panelSimulacaoLayout);
        panelSimulacaoLayout.setHorizontalGroup(
            panelSimulacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 508, Short.MAX_VALUE)
        );
        panelSimulacaoLayout.setVerticalGroup(
            panelSimulacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 429, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Simulação", panelSimulacao);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Velocidade"));

        jSlider1.setMaximum(1000);
        jSlider1.setValue(1000);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSlider1, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonExecuta, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bHistorico, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bTabela, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(jButtonExecuta)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bHistorico)
                .addGap(45, 45, 45)
                .addComponent(bTabela)
                .addGap(12, 12, 12)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonExecutaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExecutaActionPerformed

        
        switch (this.jComboBoxDistancias.getSelectedIndex()) {
            case 0:
                JOptionPane.showMessageDialog(null, "Selecione uma Medida de Distância.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                this.jButtonExecuta.setEnabled(true);
                return;
            default:
                break;
        }

        new Thread() {
            @Override
            public void run() {
                numK = frameKmeans.getK();
                boolean paradaAutomatica = frameKmeans.isParadaAutomatica();
                boolean seedAleatorios = frameKmeans.isSeedAleatorios();
                int seeds = 0;
                if (!seedAleatorios) {
                    seeds = frameKmeans.getSeeds();
                    System.out.println("perct seeds = " + seeds);
                }
                int maxIteracoes = frameKmeans.getMaxIteracoes();
                int iteracoesParada = frameKmeans.getIteracoes();
                SK = new KmeansSimulacao();
                SK.setSize(panelSimulacao.getWidth(), panelSimulacao.getHeight());
                panelSimulacao.add(SK);
                SK.setVisible(true);
                SK.setDados(dados);
                k = new KMeansPrincipal(dados, numK, paradaAutomatica, seedAleatorios, seeds, maxIteracoes, iteracoesParada, SK);
                int cont = 0;
                do {
                    k.start();

                    try {
                        SK.setCentroides(k.centroides);
                        SK.setPadroesClusters(k.getPadroesClusters());
                        SK.repaint();
                        Thread.sleep(jSlider1.getMaximum() - jSlider1.getValue());
                    } catch (InterruptedException ex) {
                        Logger.getLogger(PanelKmeans.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    if ((!k.paradaAutomatica) && (cont > k.it)) {
                        break;
                    }
                    if (cont >= k.maxI) {
                        break;
                    }

                    if (((!k.lock) && (k.paradaAutomatica))) {
                        break;
                    }
                    cont++;

                } while ((true));

                formaClusters(k.getM(), numK);
                imprimiAgrupamento();
                getBuffer().append(k.imprimi(clusters));
                getBuffer().append("\n\nMatriz Confusão:\n");
                int[][] mconfusao = avaliacao.getMconfusao();
                char classe = 'a';
                for (int i = 0; i < mconfusao[0].length; i++) {
                    getBuffer().append(classe + "\t");
                    ++classe;
                }
                getBuffer().append("\n");
                classe = 'a';
                for (int i = 0; i < mconfusao.length; i++) {
                    for (int j = 0; j < mconfusao[0].length; j++) {
                        getBuffer().append(mconfusao[i][j] + "\t");
                        if (j == mconfusao[0].length - 1) {
                            getBuffer().append("\t" + classe + " = " + dados.getClasses().get(i));
                            ++classe;
                        }
                    }
                    getBuffer().append("\n");
                }
                jTextArea3.setText(getBuffer().toString());
                listaObjetos.add(k);
                setListaResultados();
                jButtonExecuta.setEnabled(true);
                bHistorico.setEnabled(true);
                bTabela.setEnabled(true);
            }
        }.start();
    }//GEN-LAST:event_jButtonExecutaActionPerformed

    private void bHistoricoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bHistoricoActionPerformed
        imprimiAgrupamento();
        getBuffer().append(k.imprimiHistorico(clusters));
        getBuffer().append("\n\nMatriz Confusão:\n\n");
        int[][] mconfusao = k.mConfusao();
        char classe = 'a';
        for (int i = 0; i < mconfusao.length; i++) {
            getBuffer().append(classe + "\t");
            ++classe;
        }
        getBuffer().append("\n");
        classe = 'a';
        for (int i = 0; i < mconfusao.length; i++) {
            for (int j = 0; j < mconfusao.length; j++) {
                getBuffer().append(mconfusao[i][j] + "\t");
                if (j == mconfusao[0].length - 1) {
                    getBuffer().append("\t" + classe);// " = " + nomeClasses[i]);
                    ++classe;
                }
            }
            getBuffer().append("\n");
        }
        JFrameHistoricoKmeans hK = new JFrameHistoricoKmeans(getBuffer());
        hK.setVisible(true);
    }//GEN-LAST:event_bHistoricoActionPerformed

    private void listResultadosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listResultadosMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON1) {
            if (listResultados.getSelectedIndex() != -1) {
                StringBuffer text = listaBuffer.get(listResultados.getSelectedIndex());
                jTextArea3.setText(text.toString());
            }
        }
    }//GEN-LAST:event_listResultadosMouseClicked

    private void listResultadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listResultadosActionPerformed
    }//GEN-LAST:event_listResultadosActionPerformed

    private void bTabelaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bTabelaActionPerformed
        String[] atributos = new String[dadosOriginal.getAtributos().size() + 2];
        atributos[0] = "ID";
        for (int j = 0; j < dadosOriginal.getAtributos().size(); j++) {
            atributos[j + 1] = dadosOriginal.getAtributos().get(j);
        }
        atributos[atributos.length - 1] = "Cluster_ID";

        Object[][] data = new Object[dadosOriginal.getDataSet().size()][dadosOriginal.getDataSet().get(0).getAtributos().size() + 3];
        for (int i = 0; i < dadosOriginal.getDataSet().size(); i++) {
            data[i][0] = dadosOriginal.getDataSet().get(i).getNumero();
        }
        for (int i = 0; i < dadosOriginal.getDataSet().size(); i++) {
            for (int j = 0; j < dadosOriginal.getDataSet().get(0).getAtributos().size(); j++) {
                data[i][j + 1] = dadosOriginal.getDataSet().get(i).getAtributos().get(j);
            }
        }
        for (int i = 0; i < dadosOriginal.getDataSet().size(); i++) {
            data[i][dadosOriginal.getDataSet().get(0).getAtributos().size() + 1] = dadosOriginal.getDataSet().get(i).getClasse();
        }
        for (int i = 0; i < clusters.size(); i++) {
            for (int j = 0; j < clusters.get(i).getGrupo().size(); j++) {
                data[clusters.get(i).getGrupo().get(j).getNumero()][data[0].length - 1] = clusters.get(i).getNomeGrupo();
            }
        }
        new JDialogData((Frame) frameKmeans, true, data, atributos).setVisible(true);
    }//GEN-LAST:event_bTabelaActionPerformed
    KmeansSimulacao SK;
    private void panelSimulacaoComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_panelSimulacaoComponentResized
    }//GEN-LAST:event_panelSimulacaoComponentResized

    private void jComboBoxDistanciasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDistanciasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxDistanciasActionPerformed

    private void jComboBoxDistanciasPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jComboBoxDistanciasPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxDistanciasPropertyChange

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bHistorico;
    private javax.swing.JButton bTabela;
    private javax.swing.JButton jButtonExecuta;
    private javax.swing.JComboBox jComboBoxDistancias;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane3;
    private static javax.swing.JSlider jSlider1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea3;
    private java.awt.List listResultados;
    private static javax.swing.JPanel panelSimulacao;
    // End of variables declaration//GEN-END:variables

    public void startMatrizDados() {
        dados = new moduledefault.clustering.uteis.Base();
        double matriz[][] = new double[base.getInput().length][base.getInput()[0].length]; //= arrayListBases.get(arrayListBases.size() - 1).getInput();
        for (int i = 0; i < matriz.length; i++) {
            for (int j = 0; j < matriz[0].length; j++) {
                matriz[i][j] = Double.valueOf(base.getInput()[i][j] + "").doubleValue();
            }
        }

        int grupo = 0;
        for (int i = 0; i < matriz.length; i++) {
            Padrao p = new Padrao();
            p.setNumero(grupo);
            ++grupo;
            for (int j = 0; j < matriz[0].length; j++) {
                p.addAtributos(matriz[i][j]);

            }
            p.setClasse(base.getOutput()[i].toString());
            dados.addDataSet(p);
        }

        for (int i = 0; i < base.getAtributes().length; i++) {
            dados.addAtributos(base.getAtributes()[i]);
        }

        dados.setClasses((List) base.getClasses());
        dados.setNome((String) base.getName());
        dados.setDimensaoMatriz();
        dadosOriginal = dados.copy();
        Operações_Mat m = new Operações_Mat();
        m.Padronização(dados);

//        System.out.println("linhas = " + dados.getDataSet().size());
//        System.out.println("colunas = " + (dados.getAtributos().size() - 1));
    }

    public static List<String> getNomeClasses() {
        return dados.getClasses();
    }

    void imprimiAgrupamento() {
        StringBuffer buffer1 = new StringBuffer();
        setBuffer(buffer1);
        getBuffer().append("===================== Informações =====================");
        getBuffer().append("\n\t\t\tYADMT.Clustering.AC");
        getBuffer().append("\n\t Base: " + dados.getNome());
        getBuffer().append("\n\t Número de Instâncias: " + dados.getDataSet().size());
        getBuffer().append("\n\t Atributos: " + (dados.getAtributos().size() - 1));
        getBuffer().append("\n\t Classes:");
        for (int i = 0; i < dados.getClasses().size(); i++) {
            getBuffer().append("\n\t\t" + dados.getClasses().get(i));
        }
        getBuffer().append("\n\tParâmetros: " + frameKmeans.getK() + ";" + frameKmeans.isParadaAutomatica() + ";" + frameKmeans.getIteracoes() + ";"
                + frameKmeans.getMaxIteracoes() + ";" + frameKmeans.isSeedAleatorios() + ";" + frameKmeans.getSeeds());
        switch (teste_distancia) {
            case 1:
                getBuffer().append(";Ch;");
                break;
            case 2:
                getBuffer().append(";Ci;");
                break;
            case 3:
                getBuffer().append(";Cor;");
                break;
            case 4:
                getBuffer().append(";Cos;");
                break;
            case 5:
                getBuffer().append(";E;");
                break;
            case 6:
                getBuffer().append(";M;");
                break;
            default:
                break;
        }
        getBuffer().append("\n");
        avaliacao = new AvaliacaoAgrupamento(clusters, dados.getClasses(), dados);
        getBuffer().append("\n\tPorcentagem de Acerto: " + String.valueOf(avaliacao.getAcerto()));
        getBuffer().append("\n\tVariância Total: " + String.valueOf(avaliacao.getVariancia()));

    }

    private void setBuffer(StringBuffer buffer) {
        this.buffer = buffer;
    }

    private StringBuffer getBuffer() {
        return this.buffer;
    }

    private void setListaResultados() {
        PanelKmeans.ClusteringText text = new PanelKmeans.ClusteringText();
        String s = text.toString();
        text.setJTextArea(jTextArea3);
        listResultados.add(s);
        listaBuffer.add(getBuffer());
    }

    public void attBase(interfaces.Base get) {
        base = get;
        startMatrizDados();
    }

    private void formaClusters(int[][] mpos, int numGrupos) {
        clusters = new ArrayList<Cluster>();
        for (int i = 0; i < numGrupos; i++) {
            Cluster cl = new Cluster();
            clusters.add(cl);
        }
        for (int j = mpos[0].length - 1; j >= 1; j--) {
            for (int i = 0; i < j; i++) {
                if (mpos[1][i] > mpos[1][i + 1]) {
                    int auxLinha = mpos[0][i];
                    int auxColuna = mpos[1][i];
                    mpos[0][i] = mpos[0][i + 1];
                    mpos[1][i] = mpos[1][i + 1];
                    mpos[0][i + 1] = auxLinha;
                    mpos[1][i + 1] = auxColuna;
                }
            }
        }
//        System.out.println("mpos = ");
//        for (int i = 0; i < mpos.length; i++) {
//            for (int j = 0; j < mpos[0].length; j++) {
//                System.out.print(mpos[i][j] + " ");
//            }
//            System.out.println("");
//        }
        int grupoInicial = mpos[1][0];
        int iterator = 0;
        int cont = 0;
        for (int i = 0; i < numGrupos; i++) {
            for (int j = iterator; j < mpos[0].length; j++) {
                if (mpos[1][j] == grupoInicial) {
                    clusters.get(i).addPadrao(dados.getDataSet().get(mpos[0][j]));
                } else {
                    grupoInicial = mpos[1][j];
                    iterator = j;
                    break;
                }
            }
        }
//
//        System.out.println("numero de clusters: " + clusters.size());
//        for (int i = 0; i < clusters.size(); i++) {
//            System.out.println("clusters: " + (i + 1));
//            System.out.println(clusters.get(i).getNomeGrupo());
//            System.out.println("elementos: ");
//            for (int j = 0; j < clusters.get(i).getGrupo().size(); j++) {
//                System.out.print(clusters.get(i).getGrupo().get(j).getNumero() + " ");
//            }
//            System.out.println();
//        }
    }

    class ClusteringText {

        final DateFormat formatter;
        private JTextArea text;
        private Date date;

        public ClusteringText() {
            date = new Date();
            formatter = new SimpleDateFormat("HH:mm:ss");
        }

        /**
         * returns the text area
         *
         * @return
         */
        public JTextArea getJTextArea() {
            return text;
        }

        /**
         * sets the text area
         *
         * @param text
         */
        public void setJTextArea(JTextArea text) {
            this.text = text;
        }

        @Override
        public String toString() {
            return formatter.format(date) + " - K-means";

        }
    }

    public static JPanel getPanelSimulacao() {
        return panelSimulacao;
    }

    public static void setPanelSimulacao(JPanel panelSimulacao) {
        PanelKmeans.panelSimulacao = panelSimulacao;
    }
}
//     String[] nomesColunas = new String[dados.getAtributos().size() + 2];
//        nomesColunas[0] = "ID";
//        for (int i = 0; i < dados.getAtributos().size(); i++) {
//            nomesColunas[i + 1] = dados.getAtributos().get(i);
//        }
//        nomesColunas[dados.getAtributos().size() + 2] = "Cluster";
//        DefaultTableModel modelo = new DefaultTableModel(nomesColunas, dados.getDataSet().size());
//        modelo.setNumRows(0);
//        JTable tabelaBase = new JTable();
//        tabelaBase.setModel(modelo);
//        String[] temp = new String[nomesColunas.length];
//        for (int i = 0; i < clusters.size(); i++) {
//            for (int j = 0; j < clusters.get(i).getGrupo().size(); j++) {
//                temp[0] = clusters.get(i).getGrupo().get(j).getNumero() + "";
//                for (int l = 0; l < clusters.get(i).getGrupo().get(j).getAtributos().size(); l++) {
//                    temp[l + 1] = clusters.get(i).getGrupo().get(j).getAtributos().get(l) + "";
//                }
//                temp[clusters.get(i).getGrupo().get(j).getAtributos().size() + 1] = clusters.get(i).getGrupo().get(j).getClasse();
//                temp[clusters.get(i).getGrupo().get(j).getAtributos().size() + 2] = clusters.get(i).getNomeGrupo();
//                modelo.addRow(temp);
//            }
//        }
//        JFrame frameTabela = new JFrame("Tabela de Resultados");
//        frameTabela.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
//        JPanel panel = new JPanel();
//        JScrollPane scroll = new JScrollPane();
//        scroll.setSize(tabelaBase.getWidth(), 700);
//        scroll.setViewportView(tabelaBase);
//        panel.add(scroll);
//        frameTabela.add(panel);
//        frameTabela.pack();
//        frameTabela.setLocationRelativeTo(null);
//        frameTabela.setVisible(true);

